default:
  image: alpine:latest

variables:
  ENVIRONMENT: ${ENVIRONMENT:-production}
  TRIGGER_SOURCE: ${TRIGGER_SOURCE:-gitlab}
  TRIGGER_ACTION: ${TRIGGER_ACTION:-apply}
  CODE_PROJECT_ID: "67610186"

# Simple environment detection
prepare-environment:
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $ENVIRONMENT == "staging"
      when: on_success
  script:
    - |
      # Just determine which environment we're working with
      if [ "$ENVIRONMENT" == "dev" ]; then
        echo "Setting up for development environment"
        export TERRAFORM_DIR="environments/dev"
        export TF_STATE_KEY="${CI_PROJECT_PATH_SLUG}/dev.tfstate"
        export ENV_NAME="development"
      elif [ "$ENVIRONMENT" == "staging" ]; then
        echo "Setting up for staging environment"
        export TERRAFORM_DIR="environments/staging"
        export TF_STATE_KEY="${CI_PROJECT_PATH_SLUG}/staging.tfstate"
        export ENV_NAME="staging"
      elif [ "$ENVIRONMENT" == "production" ]; then
        echo "Setting up for production environment"
        export TERRAFORM_DIR="environments/production"
        export TF_STATE_KEY="${CI_PROJECT_PATH_SLUG}/production.tfstate"
        export ENV_NAME="production"
      else
        echo "Unknown environment: $ENVIRONMENT"
        exit 1
      fi
      
      echo "Selected environment: $ENVIRONMENT"
      echo "Using terraform directory: $TERRAFORM_DIR"
      
      # Save variables for later jobs
      echo "TERRAFORM_DIR=$TERRAFORM_DIR" >> variables.env
      echo "TF_STATE_KEY=$TF_STATE_KEY" >> variables.env
      echo "ENVIRONMENT=$ENVIRONMENT" >> variables.env
      echo "ENV_NAME=$ENV_NAME" >> variables.env
  artifacts:
    reports:
      dotenv: variables.env

# Define a template for Terraform setup
.terraform_setup: &terraform_setup
  before_script:
    - apk add --no-cache curl unzip aws-cli jq
    - curl -LO https://releases.hashicorp.com/terraform/1.7.4/terraform_1.7.4_linux_amd64.zip
    - unzip terraform_1.7.4_linux_amd64.zip
    - mv terraform /usr/local/bin/
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_REGION
    - cd $TERRAFORM_DIR
    - pwd
    - ls -R
    - test -f "$CI_PROJECT_DIR/$TERRAFORM_DIR/main.tf" && echo "main.tf exists" || echo "main.tf NOT FOUND"
    - >
      terraform init 
      -backend-config="bucket=$TF_STATE_BUCKET" 
      -backend-config="key=$TF_STATE_KEY" 
      -backend-config="region=$AWS_REGION" 
      -backend-config="dynamodb_table=$TF_LOCK_TABLE" 
      -backend-config="encrypt=true"
      
terraform:validate:
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $ENVIRONMENT == "staging" && $TRIGGER_ACTION == "apply"
      when: on_success
  needs:
    - job : prepare-environment
      artifacts: true
  <<: *terraform_setup
  script:
    - terraform validate
    - terraform fmt -check || true

terraform:plan:
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $ENVIRONMENT == "staging" && $TRIGGER_ACTION == "apply"
      when: on_success
  needs:
    - prepare-environment  
    - terraform:validate
  <<: *terraform_setup
  script:
    - terraform plan -out=tfplan
    - terraform show -no-color tfplan > tfplan.txt
  artifacts:
    paths:
      - $TERRAFORM_DIR/tfplan
      - $TERRAFORM_DIR/tfplan.txt
    expire_in: 1 week
  environment:
    name: $ENVIRONMENT

terraform:apply:
  needs:
    - job : terraform:plan
      artifacts: true
    - job : prepare-environment
      artifacts: true
  <<: *terraform_setup
  script:
    - terraform apply -auto-approve
  environment:
    name: $ENVIRONMENT
    
trigger-tests:
  needs:
    - job : terraform:apply  
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $ENVIRONMENT == "staging" && $TRIGGER_SOURCE == "gitlab" && $TRIGGER_ACTION == "apply"
      when: on_success
  before_script:
    - apk add --no-cache curl jq
  script:
    - echo "Triggering integrations tests for staging environment"
    - 'curl --request POST --form "token=$CODE_TRIGGER_TOKEN" --form "ref=main" --form "variables[ENVIRONMENT]=$ENVIRONMENT" "https://gitlab.com/api/v4/projects/$CODE_PROJECT_ID/trigger/pipeline" > pipeline_response.json'
    - cat pipeline_response.json
    - 'export INFRA_PIPELINE_ID=$(cat pipeline_response.json | jq -r ".id")'
    - 'if [ "$INFRA_PIPELINE_ID" == "null" ]; then echo "Failed to trigger infrastructure pipeline"; exit 1; fi'
    - echo "INFRA_PIPELINE_ID=$INFRA_PIPELINE_ID" >> infra_pipeline.env
  environment:
    name: $ENVIRONMENT

terraform:destroy:
  needs:
    - prepare-environment
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $TRIGGER_SOURCE == "gitlab" 
      when: manual    
    - if: $CI_PIPELINE_SOURCE == "trigger" && $TRIGGER_SOURCE == "iphone" && $ENVIRONMENT == "staging" && $TRIGGER_ACTION == "destroy"
      when: always
  <<: *terraform_setup
  script:
    - terraform destroy -auto-approve
  environment:
    name: $ENVIRONMENT
    action: stop