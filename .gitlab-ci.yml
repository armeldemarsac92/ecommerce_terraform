default:
  image: docker:24.0.5

variables:
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: unix:///var/run/docker.sock
  DOCKER_DRIVER: overlay2
  GIT_DEPTH: 0
  TF_STATE_KEY: "${CI_PROJECT_PATH_SLUG}/${CI_COMMIT_REF_SLUG}.tfstate"

stages:
  - terraform:validate
  - terraform:plan
  - post-terraform-comment
  - terraform:apply

# Define a template for Terraform setup to avoid repetition
.terraform_setup: &terraform_setup
  before_script:
    - apk add --no-cache curl unzip aws-cli
    - curl -LO https://releases.hashicorp.com/terraform/1.7.4/terraform_1.7.4_linux_amd64.zip
    - unzip terraform_1.7.4_linux_amd64.zip
    - mv terraform /usr/local/bin/
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_REGION
    - cd $CI_PROJECT_DIR/api/terraform
    # Initialize with explicit backend config
    - >
      terraform init \
        -backend-config="bucket=${TF_STATE_BUCKET}" \
        -backend-config="key=${TF_STATE_KEY}" \
        -backend-config="region=${AWS_REGION}" \
        -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
        -backend-config="encrypt=true"

terraform:validate:
  stage: terraform:validate
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  <<: *terraform_setup
  script:
    - terraform validate
    - terraform fmt -check

terraform:plan:
  stage: terraform:plan
  image: alpine:latest
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
  <<: *terraform_setup
  script:
    - terraform plan -out=tfplan
    - terraform show -no-color tfplan > tfplan.txt
  artifacts:
    paths:
      - api/terraform/tfplan
      - api/terraform/tfplan.txt
    expire_in: 1 week

post_terraform_plan_comment:
  stage: post-terraform-comment
  image: debian
  needs:
    - terraform:plan
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: on_success
  script:
    - apt-get update
    - apt-get install -y curl jq
    - cd $CI_PROJECT_DIR/api/terraform
    - |
      # Read the entire plan file
      PLAN_CONTENT=$(cat tfplan.txt)
      
      # Create the comment JSON with the full plan content
      COMMENT_JSON=$(jq -n \
        --arg plan "$PLAN_CONTENT" \
        --arg url "$CI_PIPELINE_URL" \
        '{body: "## Terraform Plan Results\n\n```terraform\n\($plan)\n```\n\n[View pipeline](\($url))"}')
      
      # Post comment to merge request
      curl --location --request POST \
        "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes" \
        --header "PRIVATE-TOKEN: $GITLAB_API_TOKEN" \
        --header "Content-Type: application/json" \
        --data "$COMMENT_JSON"

terraform:apply:
  stage: terraform:apply
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
  <<: *terraform_setup
  script:
    - terraform apply -auto-approve
  environment:
    name: production
    on_stop: terraform:destroy

terraform:destroy:
  stage: terraform:apply
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
  <<: *terraform_setup
  script:
    - terraform destroy -auto-approve
  environment:
    name: production
    action: stop